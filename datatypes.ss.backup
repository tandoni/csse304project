
;; Parsed expression datatypes

(define-datatype expression expression?
  
    [lit-exp (id lit?)]
    [var-exp (id symbol?)]
    [app-exp (rator expression?)
           (rand (list-of expression?)) ]
	
    [if-exp (condition expression?)
          (body expression?)]
    [if-else-exp (condition expression?)
               (body1 expression?)
               (body2 expression?)]
   ; [lit-exp (id lit2?)]
    [lambda-exp
		(id (list-of symbol?))
		(body (list-of expression?))]
	[lambda-dot-exp
		(id (list-of symbol?))
		(arbitrary-id symbol?)
		(body (list-of expression?))]
	[lambda-arbitrary-exp
		(id symbol?)
		(body (list-of expression?))]
    [let-exp (vars (list-of symbol?)) (vals (list-of expression?))
           (body (list-of expression?)) ]
    [let*-exp (vars (list-of symbol?)) (vals (list-of expression?))
            (body (list-of expression?))]
    [letrec-exp (proc-names (list-of symbol?)) (vars (list-of (list-of symbol?))) (bodies (list-of expression?))
              (letrec-body (list-of expression?))]
    [named-let-exp (id symbol?)
                 (vars (list-of symbol?)) (vals (list-of expression?))
                 (body (list-of expression?))]
    [set!-exp  (id symbol?)
             (body expression?)]
    [define-exp (name symbol?) (val (list-of expression?))]

    [cond-exp
      (conditions (list-of expression?))
      (body (list-of expression?))]

    [or-exp (body (list-of expression?))]
    [and-exp (args (list-of expression?))]

    [while-exp
		(test-exp expression?)
		(bodies list?)]

    [begin-exp (body (list-of expression?))]

    [case-exp (key expression?) (cases (lambda (x) (map (lambda (y) (or ((list-of expression?) y) (eq? y 'else))) x)))
    												(bodies (list-of expression?))]

	[void-exp]			 
    [vec-exp (id vector?)])

(define lit? 
  (lambda (x)
      (or (number? x) (vector? x) (boolean? x) (symbol? x) (string? x) (pair? x) (null? x))))


	
; datatype for procedures.  At first there is only one
; kind of procedure, but more kinds will be added later.

(define-datatype proc-val proc-val?
  [prim-proc  (name symbol?)]
  [closure    (vars (list-of symbol?)) (body (list-of expression?)) (env environment?)]
  [dot-closure
		(vars (list-of symbol?))
		(dot-var symbol?)
		(bodies (list-of expression?))
		(env environment?)]
  [arb-closure
		(arb-var symbol?)
		(bodies (list-of expression?))
		(env environment?)]
  [c-proc
    (k continuation?)]
)
	 
	 
	 
	
;; environment type definitions

(define scheme-value?
  (lambda (x) #t))

(define-datatype environment environment?
  (empty-env-record)
  (fail-env)
  (extended-env-record
   (syms (list-of symbol?))
   (vals (list-of scheme-value?))
   (env environment?))
  (recursively-extended-env-record
    (proc-names (list-of symbol?))
    (vars (list-of (list-of symbol?)))
    (bodies (list-of expression?))
    (env environment?)))

(define-datatype continuation continuation?
  [test-k
    (then-exp expression?)
    (else-exp expression?)
    (env environment?)
    (k continuation?)]
  [rator-k
    (rands (list-of expression?))
    (env environment?)
    (k continuation?)]
  [rands-k
    (proc-value scheme-value?)
    (k continuation?)]
  [let-rands-k
    (syms (list-of symbol?))
    (env environment?)
    (bodies (list-of expression?))
    (k continuation?)]
  [let-extend-k
    (bodies (list-of expression?))
    (k continuation?)]
  [letrec-extend-k
    (bodies (list-of expression?))
    (k continuation?)]
  [test-single-k
    (then-exp expression?)
    (env environment?)
    (k continuation?)]
  [while-test-k 
    (test-exp expression?)
    (bodies (list-of expression?))
    (env environment?)
    (k continuation?)]
  [continue-while-k
    (test-exp expression?)
    (bodies (list-of expression?))
    (env environment?)
    (k continuation?)]
  [and-k
    (env environment?)
    (k continuation?)]
  [2-and-k
   (body (list-of expression?))
   (env environment?)
   (k continuation?)]
  [or-k
    (env environment?)
    (k continuation?)]
  [2-or-k
   (body (list-of expression?))
   (env environment?)
   (k continuation?)]
  [pos-set!-k
    (id symbol?)
    (body (list-of expression?))
    (vals (list-of scheme-value?))
    (env environment?)
    (eval-env environment?)
    (k continuation?)]
  [2-pos-set!-k
   (pos number?)
   (vals (list-of scheme-value?))]
  [id-k]
  [order-eval-k
    (body (list-of expression?))
    (env environment?)
    (k continuation?)]
    
  )



(define apply-k
  (lambda (k val)
    (cases continuation k
      [test-k (then-exp else-exp env k)
        (if val
            (eval-exp then-exp env k)
            (eval-exp else-exp env k))]
      [test-single-k (then-exp env k)
        (if val
            (eval-exp then-exp env k))]
      [rator-k (rands env k)
        (eval-rands rands env (rands-k val k))]
      [rands-k (proc-value k)
        (apply-proc proc-value val k)]
      [let-rands-k (syms env bodies k)
        (extend-env syms val env (let-extend-k bodies k))]
      [let-extend-k (bodies k)
        (eval-in-order bodies val k)]
      [letrec-extend-k (bodies k)
        (eval-in-order bodies val k)]
      [while-test-k (test-exp bodies env k)
        (if val
           (eval-in-order bodies env (continue-while-k test-exp bodies env k))
           #t)]
      [continue-while-k (test-exp bodies env k)
        (eval-while test-exp bodies env (while-test-k test-exp bodies env k))]
      [and-k (env k)
        (cond
          [(null? val) #t]
          [(null? (cdr val)) (eval-exp (car val) env k)]
          [else (eval-exp (car val) env (2-and-k val env k))])]
      [2-and-k (body env k)
       (if val
           (eval-or (cdr body) env (or-k env k))
           #f)]
      [or-k (env k)
        (cond
          [(null? val) #f]
          [(null? (cdr val)) (eval-exp (car val) env k)]
          [else (eval-exp (car val) env (2-or-k val env k))])]
      [2-or-k (body env k)
       (if val
         val
         (eval-or (cdr body) env (or-k env k)))]
      [pos-set!-k (id body vals env eval-env k)
        (if (number? val)
            (eval-exp body eval-env (2-pos-set!-k val vals))
            (eval-set! id body env eval-env k))]
      [2-pos-set!-k (pos vals)
        (set-cell! (list-ref vals pos) val)]

      [order-eval-k (body env k) (eval-in-order body env k)]
      [id-k () val]
      )))
